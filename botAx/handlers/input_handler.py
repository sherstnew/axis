from aiogram import Router, F
from aiogram.types import Message
from botAx.classes.UsersChoice import UsersChoice
from botAx.keyboards.row_keyboard_with_come_back import row_keyboard_with_come_back
from botAx.keyboards.row_keyboard import make_keyboard_row
from botAx.global_params import available_input_choice, useful_data_1, useful_data_2, available_start_choice
from aiogram.fsm.context import FSMContext
from botAx.other_functions import check_digits
import requests
import time

router = Router()


@router.message(UsersChoice.input_choosing, F.text == None)
async def geo_handler(message: Message, state: FSMContext):
    await choose_cords(message, state)


@router.message(UsersChoice.input_choosing, F.text == available_input_choice[1])
async def choose_cords(message: Message, state: FSMContext):
    if available_input_choice[1] == message.text:
        await state.set_state(UsersChoice.choose_cords_writing)
        await message.answer(
            text="–•–æ—Ä–æ—à–æüëç! –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–∑–º–æ–∂–Ω–æ–π –±—É–¥—É—â–µ–π"
                 " –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–π–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –≤ —Ä–∞–¥–∏—É—Å–µ 385 –º–µ—Ç—Ä–æ–≤ —Å–æ–∑–¥–∞—Ç—å—Å—è "
                 f"–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∑–∞—Å—Ç—Ä–æ–π–∫–∞\n\n–í–æ—Ç –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n{useful_data_1}")
        return
    await state.set_state(UsersChoice.cords_writing)
    cords = (message.location.latitude, message.location.longitude)
    await state.update_data(cords=cords)
    await message.answer(
        text="–û—Ç–ª–∏—á–Ω–æüëç! –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å –≤ —Ä–∞–¥–∏—É—Å–µ 385 –º–µ—Ç—Ä–æ–≤ –æ—Ç –≤–∞—Å —Å–æ–∑–¥–∞–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∑–∞—Å—Ç—Ä–æ–π–∫–∞"
             " –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–∑–º—É–∂–Ω–æ–π –±—É–¥—É—â–µ–π"
             f" –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏.\n\n–í–æ—Ç –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n{useful_data_2}")


@router.message(UsersChoice.cords_writing, F.text != '–í–µ—Ä–Ω—É—Ç—å—Å—èüîô')
async def data_confirm(message: Message, state: FSMContext):
    text = message.text.split('\n')
    if len(text) != 8 or not check_digits(text) or [i for i in text if float(i) < 0]:
        await message.answer(
            text=f"–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æüö´!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —Å–ø–∏—Å–∫—É:\n{useful_data_2}")
        return
    data = await state.get_data()
    response = requests.post('http://172.16.18.126:8000/info',
                             json={"count_houses": text[0], "no_living_square": text[3], "apartments": text[1],
                                   "block_of_flats": text[2], "coordinates": [data['cords'][0], data['cords'][1]],
                                   "neeres_stations": [
                                       {'name': 'station', 'passengerflow_mornind': text[4],
                                        'passengerflow_evening': text[4], 'capacity': text[6]}], 'roads': [
                                     {'transport_in_hour': text[7],
                                      'rush_hour': round(int(text[4]) / int(text[7]), 1) * 10, 'max_load': text[7]}],
                                   'road_location': [1]}).json()

    await message.answer(text='–í—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å‚úÖ!\n–û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏‚è≥')
    time.sleep(2)
    await message.answer(text=f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã‚ÑπÔ∏è:\n1)–î–ª—è –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:\n'
                              f'    - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–ø–æ—Ç–æ–∫–∞ –Ω–∞ {round(response[0][0][0][0], 5)} —Ç—ã—Å. —á–µ–ª./—á–∞—Å\n'
                              f'    - –∑–∞–ø–æ–ª–Ω–µ–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω—Ü–∏–π - {round(response[0][0][0][1] * 100, 5)}%\n'
                              f'    - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω—Ü–∏–π - {round(response[0][0][0][2] * 100, 5)}%\n'

                              f'2)–î–ª—è –¥–æ—Ä–æ–≥:\n'
                              f'    - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ {round(response[1][0][0], 5)} —Ç.—Å.\n'
                              f'    - –±–∞–ª–ª—ã –ø—Ä–æ–±–æ–∫ - {round(response[1][0][1], 0)} –±–∞–ª–ª–æ–≤\n'
                              f'    - —É–≤–µ–ª–µ—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø—Ä–æ–±–æ–∫ –Ω–∞ {round(response[1][0][2], 0)} –±–∞–ª–ª–æ–≤',
                         reply_markup=make_keyboard_row(available_start_choice))

    await state.clear()
    await state.set_state(UsersChoice.start_choosing)


@router.message(UsersChoice.choose_cords_writing, F.text != '–í–µ—Ä–Ω—É—Ç—å—Å—èüîô')
async def choose_data_confirm(message: Message, state: FSMContext):
    text = message.text.split('\n')

    if (len(text) != 10 or not check_digits(text) or [i for i in text if float(i) < 0]
            or not -90 <= float(text[0]) <= 90 or not -180 <= float(text[1]) <= 180):
        await message.answer(
            text=f"–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æüö´!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —Å–ø–∏—Å–∫—É:\n{useful_data_1}")
        return
    text = list(map(lambda x: float(x), text))
    response = requests.post('http://172.16.18.126:8000/info',
                             json={"count_houses": text[2], "no_living_square": text[5], "apartments": text[3],
                                   "block_of_flats": text[4], "coordinates": [text[0], text[1]], "neeres_stations": [
                                     {'name': 'station', 'passengerflow_mornind': text[7],
                                      'passengerflow_evening': text[7], 'capacity': text[8]}], 'roads': [
                                     {'transport_in_hour': text[6],
                                      'rush_hour': round(text[6] / text[9], 1) * 10, 'max_load': text[9]}],
                                   'road_location': [1]}).json()

    await message.answer(text='–í—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å‚úÖ!\n–û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏‚è≥')

    time.sleep(2)
    await message.answer(text=f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã‚ÑπÔ∏è:\n1)–î–ª—è –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:\n'
                              f'    - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–ø–æ—Ç–æ–∫–∞ –Ω–∞ {round(response[0][0][0][0], 5)} —Ç—ã—Å. —á–µ–ª./—á–∞—Å\n'
                              f'    - –∑–∞–ø–æ–ª–Ω–µ–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω—Ü–∏–π - {round(response[0][0][0][1] * 100, 5)}%\n'
                              f'    - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω—Ü–∏–π - {round(response[0][0][0][2] * 100, 5)}%\n'

                              f'2)–î–ª—è –¥–æ—Ä–æ–≥:\n'
                              f'    - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ {round(response[1][0][0], 5)} —Ç.—Å.\n'
                              f'    - –±–∞–ª–ª—ã –ø—Ä–æ–±–æ–∫ - {round(response[1][0][1], 0)} –±–∞–ª–ª–æ–≤\n'
                              f'    - —É–≤–µ–ª–µ—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø—Ä–æ–±–æ–∫ –Ω–∞ {round(response[1][0][2], 0)} –±–∞–ª–ª–æ–≤',
                         reply_markup=make_keyboard_row(available_start_choice))
    await state.clear()
    await state.set_state(UsersChoice.start_choosing)


@router.message(UsersChoice.choose_cords_writing, F.text != '–í–µ—Ä–Ω—É—Ç—å—Å—èüîô')
async def choose_data_wrong(message: Message, state: FSMContext):
    await state.update_data(chosen_cords=message.text.lower())
    await message.answer(
        text="–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—åüö´! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –µ—â–µ —Ä–∞–∑üîÑ",
        reply_markup=row_keyboard_with_come_back(available_input_choice))
